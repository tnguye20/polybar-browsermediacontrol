#!/usr/bin/python3
from pydbus import SessionBus
from gi.repository import GLib
import sys
import os
import argparse
import re
import time

ICON_PLAY = "\uf144"
ICON_PAUSE = "\uf28b"
ICON_NEXT = "\uf152"
ICON_PREV = "\uf191"
ICON = ""
PATH=os.path.realpath(__file__)
TITLE_LENGTH = 25
MEDIA_ICONS = {
    'apple': '\uf302',
    'spotify': '\uf1bc',
    'youtube': '\uf16a'
}
PATTERN = '(' + '|'.join(MEDIA_ICONS.keys()) + ')'
MEDIA_ICONS_REGEX = re.compile(PATTERN, re.MULTILINE)
PAUSE_LOCK_PATH = os.path.join(os.path.dirname(os.path.abspath(__file__)), '.paused')

parser = argparse.ArgumentParser()
parser.add_argument('--limit', type=int)
parser.add_argument('--volume', type=int)
parser.add_argument('--playpause', action="store_true")
parser.add_argument('--next', action="store_true")
parser.add_argument('--prev', action="store_true")
args= parser.parse_args()

bus = SessionBus()
try:
    Player = bus.get(
        "org.kde.plasma.browser_integration",
        "/org/mpris/MediaPlayer2"
    )
except GLib.Error:
    exit()

def action(command, text):
    return "%{A1:" + PATH + " --" + command + ":}" + text + "%{A}"

def truncate(text, max_len):
    return text[:max_len] + "..." if len(text) > max_len and max_len > 0 else text

def get_media_icon(url):
    match = MEDIA_ICONS_REGEX.findall(url)
    if match:
        if len(match) == 1:
            return MEDIA_ICONS[match[0]]
    return None

if Player.PlaybackStatus != "Stopped":
    if args.volume != None:
        vol = Player.Volume
        Player.Volume = vol + (args.volume * 0.1)
        exit()
    if args.playpause:
        Player.PlayPause()
        exit()
    if Player.PlaybackStatus=="Playing":
        ICON = ICON_PAUSE
        if os.path.isfile(PAUSE_LOCK_PATH):
            os.remove(PAUSE_LOCK_PATH)
    elif Player.PlaybackStatus=="Paused":
        if not os.path.isfile(PAUSE_LOCK_PATH):
            open(PAUSE_LOCK_PATH, 'w').close()
        else:
            _time = os.path.getctime(PAUSE_LOCK_PATH)
            current_time = time.time()
            if(((current_time - _time) / 60) >= 1):
                print("") 
                exit()
        ICON = ICON_PLAY
    if args.next:
        Player.Next()
    elif args.prev:
        Player.Previous()
    
    if args.limit:
        TITLE_LENGTH = args.limit

    title = Player.Metadata["xesam:title"]
    media_icon = get_media_icon(Player.Metadata["xesam:url"].lower())
    output = action("prev", ICON_PREV) + " " + action("playpause", ICON) + " " + action("next", ICON_NEXT) + " | " + ( f"{media_icon}  " if media_icon else "" ) + truncate(title, TITLE_LENGTH)
    print(output)
else:
    print("")